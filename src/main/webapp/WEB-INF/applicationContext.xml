<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<context:component-scan base-package="us.chotchki.webCiv.db" />

	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/webCiv" />

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- Transaction Management -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="pgGallery.db.dao" />
	</bean>

	
	<!-- Setup Spring Security -->
	<!-- 
	<security:http auto-config="true" use-expressions="true"
		disable-url-rewriting="true">
		<security:intercept-url pattern="/font/**"
			access="permitAll" />
		<security:intercept-url pattern="/js/**"
			access="permitAll" />
		<security:intercept-url pattern="/styles/**"
			access="permitAll" />

		<security:intercept-url method="POST"
			pattern="/gallery/album/create*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<security:intercept-url method="POST"
			pattern="/gallery/item/upload*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<security:intercept-url pattern="/profile*"
			access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<security:intercept-url method="GET" pattern="/**"
			access="isAnonymous() or hasAnyRole('ROLE_USER','ROLE_ADMIN')" />

		<security:form-login login-page='/login' />
	</security:http>
	<security:global-method-security pre-post-annotations="enabled" />

	<security:authentication-manager>
		<security:authentication-provider
			ref="daoAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<bean id="userDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="usersByUsernameQuery">
			<value>
				select username,
				password,
				enabled
				from users
				where username = ?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				select
				username,
				CASE
				WHEN admin = true THEN 'ROLE_ADMIN'
				ELSE 'ROLE_USER'
				END
				from users where username = ?
			</value>
		</property>
	</bean>

	<bean id="passwordEncoder" class="pgGallery.security.SHA512PasswordEncoder" />-->
</beans>